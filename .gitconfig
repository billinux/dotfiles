[init]
  templatedir = ~/.git_template # Default git hooks

[core]
  editor = vim
  excludesfile = ~/.gitignore

[push]
  default = matching

[merge]
  ff = only

[commit]
  template = ~/.gitmessage

[fetch]
  prune = true

[color]
  diff = auto
  status = auto
  branch = auto
  interactive = auto
  ui = true
  pager = true

[color "branch"]
  current = green reverse
  local = green
  remote = red bold

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse

[diff]
  tool = vimdiff

[difftool]
  prompt = false

[gitflow "prefix"]
  feature = feature-
  release = release-
  hotfix = hotfix-
  support = support-
  versiontag = v

[grep]
  lineNumber = true
  extendedRegexp = true

[format]
  pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset

[pretty]
  nice = "%C(yellow)%h%C(reset) %C(white)%s%C(cyan)%d%C(reset) -- %an; %ar"

[alias]
  a = add --all
  ai = add -i
  #############
  ap = apply
  as = apply --stat
  ac = apply --check
  #############
  ama = am --abort
  amr = am --resolved
  ams = am --skip
  #############
  b = branch
  ba = branch -a
  bd = branch -d
  br = branch -r
  bv = branch -v
  #############
  c = commit
  ca = commit -a
  cm = commit -m
  cem = commit --allow-empty -m
  cam = commit -am
  cd = commit --amend
  cad = commit -a --amend
  ced = commit --allow-empty --amend
  #############
  d = diff
  dc = diff --cached
  dl = difftool
  dlc = difftool --cached
  dk = diff --check
  dp = diff --patience
  dck = diff --cached --check
  #############
  f = fetch
  fo = fetch origin
  fu = fetch upstream
  #############
  fp = format-patch
  #############
  fk = fsck
  #############
  g = grep -p
  #############
  lg = log --oneline --graph --decorate
  graph = log --pretty=nice --date-order --graph --all   # Custom graph log for all branches
  #############
  ls = ls-files
  lsf = "!git ls-files | grep -i"
  #############
  m = merge
  ma = merge --abort
  mc = merge --continue
  ms = merge --skip
  #############
  co = checkout
  cob = checkout -b
  #############
  pr = prune -v
  #############
  ps = push
  psf = push -f
  psu = push -u
  pso = push origin
  psao = push --all origin
  psfo = push -f origin
  psuo = push -u origin
  psom = push origin master
  psfom = push -f origin master
  psuom = push -u origin master
  #############
  pl = pull
  plu = pull -u
  plo = pull origin
  plp = pull upstream
  plom = pull origin master
  plpm = pull upstream master
  #############
  pb = pull --rebase
  pbo = pull --rebase origin
  pbp = pull --rebase upstream
  pbom = pull --rebase origin master
  pbpm = pull --rebase upstream master
  #############
  rb = rebase
  rba = rebase --abort
  rbc = rebase --continue
  rbi = rebase --interactive
  rbi5 = rebase --interactive HEAD~5
  rbi10 = rebase --interactive HEAD~10
  rbi20 = rebase --interactive HEAD~20
  rbs = rebase --skip
  #############
  re = reset
  unstage = reset HEAD        # Remove files from index (tracking)
  uncommit = reset --soft HEAD^   # Go back before last commit, with files in uncommitted state
  reh = reset --hard
  rem = reset --mixed
  res = reset --soft
  rehh = reset --hard HEAD    # Note that this is dangerous
  remh = reset --mixed HEAD
  #############
  r = remote
  ra = remote add
  rr = remote rm
  rv = remote -v
  rm = remote rename
  rp = remote prune
  rs = remote show
  rao = remote add origin
  rau = remote add upstream
  rso = remote show origin
  rsu = remote show upstream
  rpo = remote prune origin
  rpu = remote prune upstream
  #############
  s = status
  st = status
  sb = status -s -b
  #############
  sa = stash apply
  sc = stash clear
  sd = stash drop
  sl = stash list
  sp = stash pop
  ss = stash save
  sw = stash show
  stsh = !CURRENT=$(git symbolic-ref HEAD) && git symbolic-ref HEAD refs/heads/stash && git commit -a -m stashed && git checkout $CURRENT
  ##############
  t = tag -n                  # Show tag with <n> lines of each tag message
  #############
  w = show
  wp = show -p
  wr = show -p --no-color
  #############
  svnr = svn rebase
  svnd = svn dcommit
  svnl = svn log --oneline --show-commit
  #############
  create-branch = !sh -c 'git push origin HEAD:refs/heads/$1 && git fetch origin && git branch --track $1 origin/$1 && cd . && git checkout $1' -
  delete-branch = !sh -c 'git push origin :refs/heads/$1 && git branch -D $1' -
  merge-branch = !git checkout master && git merge @{-1}
  alias = !git config --list | grep alias
  ctags = "!sh -c '[ -f .git/hooks/ctags ] || git init; .git/hooks/ctags' git-ctags"
  pr = !gh pull-request
  up = !git fetch origin && git rebase origin/master
  #############
  assume = update-index --assume-unchanged
  unassume = update-index --no-assume-unchanged
  assumed = "!git ls-files -v | grep ^h | cut -c 3-"
  unassumeall = !git assumed | xargs git update-index --no-assume-unchanged
  assumeall = "!git st -s | awk {'print $2'} | xargs git assume"
  #############
  ours = "!f() { git checkout --ours $@ && git add $@; }; f"
  theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"
  #############
  whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
  whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
  #############
  bare-branch = !sh -c 'git symbolic-ref HEAD refs/heads/$1 && git rm --cached -r . && git clean -xfd' -
  flat = clone --depth 1
  subpull = !git submodule foreach git pull --tags origin master
  subrepo = !sh -c 'filter-branch --prune-empty --subdirectory-filter $1 master' -
  human = name-rev --name-only --refs=refs/heads/*
  serve = !git daemon --reuseaddr --verbose  --base-path=. --export-all ./.git
  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"

[include]
  path = ~/.gitconfig.local
